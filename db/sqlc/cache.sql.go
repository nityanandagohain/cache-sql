// Code generated by sqlc. DO NOT EDIT.
// source: cache.sql

package db

import (
	"context"
	"database/sql"
)

const delete = `-- name: Delete :exec
DELETE from cache 
WHERE cache_key = ?
`

func (q *Queries) Delete(ctx context.Context, cacheKey string) error {
	_, err := q.db.ExecContext(ctx, delete, cacheKey)
	return err
}

const get = `-- name: Get :one
SELECT cache_key, value, ttl from cache 
WHERE cache_key = ? LIMIT 1
`

func (q *Queries) Get(ctx context.Context, cacheKey string) (Cache, error) {
	row := q.db.QueryRowContext(ctx, get, cacheKey)
	var i Cache
	err := row.Scan(&i.CacheKey, &i.Value, &i.Ttl)
	return i, err
}

const set = `-- name: Set :exec
INSERT INTO cache (
    cache_key, 
    value, 
    ttl
)
VALUES (
    ?, ?, ?
)
`

type SetParams struct {
	CacheKey string        `json:"cache_key"`
	Value    string        `json:"value"`
	Ttl      sql.NullInt32 `json:"ttl"`
}

// postgres has implicit tansaction for single statement
func (q *Queries) Set(ctx context.Context, arg SetParams) error {
	_, err := q.db.ExecContext(ctx, set, arg.CacheKey, arg.Value, arg.Ttl)
	return err
}
